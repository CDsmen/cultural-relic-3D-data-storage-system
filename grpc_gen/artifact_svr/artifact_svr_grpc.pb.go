// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: idl/artifact_svr.proto

package artifact_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtifactService_StoreArtifact_FullMethodName  = "/ArtifactService/StoreArtifact"
	ArtifactService_UpdateArtifact_FullMethodName = "/ArtifactService/UpdateArtifact"
	ArtifactService_QueryArtifact_FullMethodName  = "/ArtifactService/QueryArtifact"
)

// ArtifactServiceClient is the client API for ArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactServiceClient interface {
	StoreArtifact(ctx context.Context, in *StoreArtifactReq, opts ...grpc.CallOption) (*StoreArtifactResp, error)
	UpdateArtifact(ctx context.Context, in *UpdateArtifactReq, opts ...grpc.CallOption) (*UpdateArtifactResp, error)
	QueryArtifact(ctx context.Context, in *QueryArtifactReq, opts ...grpc.CallOption) (*QueryArtifactResp, error)
}

type artifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactServiceClient(cc grpc.ClientConnInterface) ArtifactServiceClient {
	return &artifactServiceClient{cc}
}

func (c *artifactServiceClient) StoreArtifact(ctx context.Context, in *StoreArtifactReq, opts ...grpc.CallOption) (*StoreArtifactResp, error) {
	out := new(StoreArtifactResp)
	err := c.cc.Invoke(ctx, ArtifactService_StoreArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) UpdateArtifact(ctx context.Context, in *UpdateArtifactReq, opts ...grpc.CallOption) (*UpdateArtifactResp, error) {
	out := new(UpdateArtifactResp)
	err := c.cc.Invoke(ctx, ArtifactService_UpdateArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) QueryArtifact(ctx context.Context, in *QueryArtifactReq, opts ...grpc.CallOption) (*QueryArtifactResp, error) {
	out := new(QueryArtifactResp)
	err := c.cc.Invoke(ctx, ArtifactService_QueryArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactServiceServer is the server API for ArtifactService service.
// All implementations must embed UnimplementedArtifactServiceServer
// for forward compatibility
type ArtifactServiceServer interface {
	StoreArtifact(context.Context, *StoreArtifactReq) (*StoreArtifactResp, error)
	UpdateArtifact(context.Context, *UpdateArtifactReq) (*UpdateArtifactResp, error)
	QueryArtifact(context.Context, *QueryArtifactReq) (*QueryArtifactResp, error)
	mustEmbedUnimplementedArtifactServiceServer()
}

// UnimplementedArtifactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactServiceServer struct {
}

func (UnimplementedArtifactServiceServer) StoreArtifact(context.Context, *StoreArtifactReq) (*StoreArtifactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) UpdateArtifact(context.Context, *UpdateArtifactReq) (*UpdateArtifactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) QueryArtifact(context.Context, *QueryArtifactReq) (*QueryArtifactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) mustEmbedUnimplementedArtifactServiceServer() {}

// UnsafeArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactServiceServer will
// result in compilation errors.
type UnsafeArtifactServiceServer interface {
	mustEmbedUnimplementedArtifactServiceServer()
}

func RegisterArtifactServiceServer(s grpc.ServiceRegistrar, srv ArtifactServiceServer) {
	s.RegisterService(&ArtifactService_ServiceDesc, srv)
}

func _ArtifactService_StoreArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreArtifactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).StoreArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_StoreArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).StoreArtifact(ctx, req.(*StoreArtifactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_UpdateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).UpdateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_UpdateArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).UpdateArtifact(ctx, req.(*UpdateArtifactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_QueryArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArtifactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).QueryArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_QueryArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).QueryArtifact(ctx, req.(*QueryArtifactReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactService_ServiceDesc is the grpc.ServiceDesc for ArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArtifactService",
	HandlerType: (*ArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreArtifact",
			Handler:    _ArtifactService_StoreArtifact_Handler,
		},
		{
			MethodName: "UpdateArtifact",
			Handler:    _ArtifactService_UpdateArtifact_Handler,
		},
		{
			MethodName: "QueryArtifact",
			Handler:    _ArtifactService_QueryArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/artifact_svr.proto",
}
